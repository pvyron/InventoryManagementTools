@page "/file/share"
@using InMa.Shopping.Data.Repositories.Abstractions
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>File-sharing</PageTitle>

<FluentInputFile @ref="@myFileByStream"
                 AnchorId="MyUploadStream"
                 DragDropZoneVisible="false"
                 Mode="InputFileMode.Stream"
                 Multiple="true"
                 MaximumFileSize="@(20 * 1024 * 1024)"
                 @* Accept=".mp4, .mov, .avi" *@
                 OnFileUploaded="@OnFileUploadedAsync"
                 OnCompleted="@OnCompleted" />

<FluentProgress Min="0" Max="100" Value="@progressPercent" Visible="@(progressPercent > 0)" />
<FluentLabel Alignment="HorizontalAlignment.Center">
    @progressTitle
</FluentLabel>

<FluentButton Appearance="Appearance.Accent" Id="MyUploadStream">
    Upload files
</FluentButton>

@if (Files.Any())
{
    <h4>File(s) uploaded:</h4>
    <ul>
        @foreach (var file in Files)
        {
            <li>
                @file
            </li>
        }
    </ul>
}

@code
{
    [Inject] private IFilesRepository FilesRepository { get; set; } = null!;
    FluentInputFile? myFileByStream = default!;
    int? progressPercent;
    string? progressTitle;

    List<string> Files = new();

    async Task OnFileUploadedAsync(FluentInputFileEventArgs file)
    {
        try
        {
            progressPercent = file.ProgressPercent;
            progressTitle = file.ProgressTitle;
            Console.WriteLine("File fetched");
            var blobId = await FilesRepository.UploadFile("test@test.test", file.Stream!, CancellationToken.None);
            Console.WriteLine("File uploaded");
            Files.Add(blobId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message + Environment.NewLine + ex.StackTrace);
        }
    }

    void OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        progressPercent = myFileByStream!.ProgressPercent;
        progressTitle = myFileByStream!.ProgressTitle;
    }
}